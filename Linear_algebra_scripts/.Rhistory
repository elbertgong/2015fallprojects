#install.packages("numDeriv")
library(numDeriv)    #for the grad() function
f <- function(v) c(v[1]^.75*v[2]^(1/3)+v[1],v[1]^.25*v[2]^(2/3)+v[2])
f(c(16,8))   #it works: V=32, P=16
fJ <- jacobian(f, c(16,8));fJ
fInvJ <- solve(fJ); fInvJ
#want to find where f(x,y)=(24, 24)
g <- c(24,24)
increment <- g-c(32,16)   #volume 32->24 , profit 16->24
g1 <- c(16,8)+fInvJ%*%increment; g1; f(g1)
increment <- g-f(g1)
g2 <- g1+fInvJ%*%increment; g2; f(g2)
increment <- g-f(g2)
g3 <- g2+fInvJ%*%increment; g3; f(g3)
increment <- g-f(g3)
g4 <- g3+fInvJ%*%increment; g4; f(g4)
increment <- g-f(g4)
g5 <- g4+fInvJ%*%increment; g5; f(g5)
#install.packages("numDeriv")
library(numDeriv)    #for the grad() function
par(mar = c(2,2,1,1))  #maximize space for graphs
f <- function(x) (x*(x^2 - 1)*(x^2-4) - 1)
#Graph the function on a interval where it has roots
curve(f(x), from = -2, to = 2.1)
abline(h=0, col = "green")
#Find a value that makes f close to zero  and evaluate f and f' there
x0 <- -1.9; f(x0); grad(f, x0)
#Add the tangent line to the plot
curve(f(x0) + grad(f, x0)*(x-x0), col = "red", add = TRUE)
#Solve a linear approximation to find where the tangent line is zero
x1 <- x0 - f(x0)/grad(f, x0); abline(v = x1, col = "red"); f(x1)
#Repeat to improve the approximation
x2 <- x1 - f(x1)/grad(f, x1); abline(v = x2, col = "red", lty = 2); f(x2)
x3 <- x2 - f(x2)/grad(f, x2); abline(v = x3, col = "red", lty = 3); f(x3)
a1 <- x3; x3
#Find the other 4 roots the same way, looking at the graph for good approximations
x0 <- -1.2; f(x0); grad(f, x0)
#Add the tangent line to the plot
curve(f(x0) + grad(f, x0)*(x-x0), col = "red", add = TRUE)
#Solve a linear approximation to find where the tangent line is zero
x1 <- x0 - f(x0)/grad(f, x0); abline(v = x1, col = "red"); f(x1)
#Repeat to improve the approximation
x2 <- x1 - f(x1)/grad(f, x1); abline(v = x2, col = "red", lty = 2); f(x2)
x3 <- x2 - f(x2)/grad(f, x2); abline(v = x3, col = "red", lty = 3); f(x3)
a2 <- x3; x3
x0 <- .2; f(x0); grad(f, x0)
#Add the tangent line to the plot
curve(f(x0) + grad(f, x0)*(x-x0), col = "red", add = TRUE)
#Solve a linear approximation to find where the tangent line is zero
x1 <- x0 - f(x0)/grad(f, x0); abline(v = x1, col = "red"); f(x1)
#Repeat to improve the approximation
x2 <- x1 - f(x1)/grad(f, x1); abline(v = x2, col = "red", lty = 2); f(x2)
x3 <- x2 - f(x2)/grad(f, x2); abline(v = x3, col = "red", lty = 3); f(x3)
a3 <- x3; x3
x0 <- .8; f(x0); grad(f, x0)
#Add the tangent line to the plot
curve(f(x0) + grad(f, x0)*(x-x0), col = "red", add = TRUE)
#Solve a linear approximation to find where the tangent line is zero
x1 <- x0 - f(x0)/grad(f, x0); abline(v = x1, col = "red"); f(x1)
#Repeat to improve the approximation
x2 <- x1 - f(x1)/grad(f, x1); abline(v = x2, col = "red", lty = 2); f(x2)
x3 <- x2 - f(x2)/grad(f, x2); abline(v = x3, col = "red", lty = 3); f(x3)
a4 <- x3; a4
x0 <- 2; f(x0); grad(f, x0)
#Add the tangent line to the plot
curve(f(x0) + grad(f, x0)*(x-x0), col = "red", add = TRUE)
#Solve a linear approximation to find where the tangent line is zero
x1 <- x0 - f(x0)/grad(f, x0); abline(v = x1, col = "red"); f(x1)
#Repeat to improve the approximation
x2 <- x1 - f(x1)/grad(f, x1); abline(v = x2, col = "red", lty = 2); f(x2)
x3 <- x2 - f(x2)/grad(f, x2); abline(v = x3, col = "red", lty = 3); f(x3)
a5 <- x3; a5
a1; a2; a3; a4; a5
